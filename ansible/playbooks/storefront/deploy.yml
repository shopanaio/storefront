# Deploy Storefront (Next.js) to remote host via Traefik
# Variables are loaded from sandbox.vars.yml
# Usage: ansible-playbook playbooks/storefront/deploy.yml -i hosts.ini --limit shopana_sandbox
---
- name: Deploy Storefront
  hosts: shopana_sandbox
  become: true

  vars_files:
    - sandbox.vars.yml

  vars:
    # Application configuration
    app_name: storefront
    app_dir: /opt/shopana/storefront

    # Image configuration
    storefront_image_tag: "{{ image_tag | default('latest', true) }}"
    storefront_image_name: "{{ shopana_ghcr_registry }}/{{ shopana_ghcr_owner }}/storefront:{{ storefront_image_tag }}"

  tasks:
    - name: Ensure required variables are provided
      ansible.builtin.assert:
        that:
          - shopana_ghcr_owner is defined and shopana_ghcr_owner | length > 0
          - shopana_ghcr_token is defined and shopana_ghcr_token | length > 0
          - storefront_container_port is defined
        fail_msg: "Please provide required variables via inventory or vars file."
      run_once: true
      delegate_to: localhost
      become: false

    - name: Create remote deployment directory
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        mode: "0755"

    - name: Generate docker-compose.yml from template
      ansible.builtin.template:
        src: "{{ playbook_dir }}/docker-compose.yml.j2"
        dest: "{{ app_dir }}/docker-compose.yml"
        mode: "0644"

    - name: Deploy block with login/logout
      block:
        - name: Show deployment information
          ansible.builtin.debug:
            msg:
              - "üöÄ Deploying {{ app_name }}"
              - "  Image: {{ storefront_image_name }}"
              - "  Port: {{ storefront_container_port }}"
              - "  Directory: {{ app_dir }}"

        - name: Login to GitHub Container Registry on the remote server
          community.docker.docker_login:
            registry: "{{ shopana_ghcr_registry }}"
            username: "{{ shopana_ghcr_owner }}"
            password: "{{ shopana_ghcr_token }}"
          no_log: true

        - name: Cleanup containers on port {{ storefront_container_port }}
          ansible.builtin.include_tasks: "{{ root_dir }}/ansible/tasks/cleanup-port-task.yml"
          vars:
            cleanup_port: "{{ storefront_container_port }}"

        - name: Stop and remove existing storefront container if running
          ansible.builtin.command:
            cmd: docker compose down
            chdir: "{{ app_dir }}"
          ignore_errors: true
          changed_when: true

        - name: Wait for port to be released
          ansible.builtin.wait_for:
            port: "{{ storefront_container_port }}"
            state: stopped
            timeout: 30
          ignore_errors: true

        - name: Additional pause to ensure cleanup
          ansible.builtin.pause:
            seconds: 2

        - name: Pull the latest image and start service with Docker Compose
          community.docker.docker_compose_v2:
            project_src: "{{ app_dir }}"
            pull: always
            state: present

        - name: Wait a moment for container to start
          ansible.builtin.pause:
            seconds: 5

        - name: Show startup logs
          ansible.builtin.command:
            cmd: docker compose logs --tail=50
            chdir: "{{ app_dir }}"
          register: startup_logs
          changed_when: false

        - name: Display startup logs
          ansible.builtin.debug:
            var: startup_logs.stdout_lines

        - name: Wait for storefront to listen on {{ storefront_container_port }}
          ansible.builtin.wait_for:
            host: 127.0.0.1
            port: "{{ storefront_container_port }}"
            delay: 3
            timeout: 60

        - name: Show container status
          ansible.builtin.command:
            cmd: docker compose ps
            chdir: "{{ app_dir }}"
          register: compose_ps
          changed_when: false

        - name: Display status
          ansible.builtin.debug:
            var: compose_ps.stdout_lines

        - name: Show success message
          ansible.builtin.debug:
            msg:
              - "‚úÖ Storefront deployed successfully"
              - ""
              - "üåê Access Info:"
              - "  Directory: {{ app_dir }}"
              - "  Port: {{ storefront_container_port }}"
              - ""
              - "üìä View Logs:"
              - "  ssh {{ ansible_host }} 'cd {{ app_dir }} && docker compose logs -f'"
              - ""
              - "üîß Manage Service:"
              - "  ssh {{ ansible_host }} 'cd {{ app_dir }} && docker compose restart'"
              - "  ssh {{ ansible_host }} 'cd {{ app_dir }} && docker compose stop'"

      rescue:
        - name: Show error details
          ansible.builtin.debug:
            msg:
              - "‚ùå Deployment failed!"
              - "Task: {{ ansible_failed_task.name | default('Unknown') }}"
              - "Error: {{ ansible_failed_result.msg | default('No message') }}"

        - name: Show container status on error
          ansible.builtin.command:
            cmd: docker compose ps
            chdir: "{{ app_dir }}"
          register: error_compose_ps
          changed_when: false
          ignore_errors: true

        - name: Display status on error
          ansible.builtin.debug:
            var: error_compose_ps.stdout_lines

      always:
        - name: Logout from GitHub Container Registry
          ansible.builtin.command:
            cmd: "docker logout {{ shopana_ghcr_registry }}"
          changed_when: false
          ignore_errors: true

