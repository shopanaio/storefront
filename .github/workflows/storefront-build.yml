name: Build and Push Storefront

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: Image tag to publish (e.g., 1.2.3 or sandbox-123)
        required: true
        type: string
      brand:
        description: Brand suffix (e.g., default, xyz)
        required: true
        type: string
      cms:
        description: CMS provider
        required: true
        type: string
      shopana_graphql_url:
        description: GraphQL endpoint URL
        required: true
        type: string
      next_public_app_url:
        description: Public app URL (NEXT_PUBLIC_APP_URL)
        required: false
        type: string
      port:
        description: App port
        required: true
        type: string
      platforms:
        description: Target platforms for the image
        required: false
        type: string
      shopana_api_key:
        description: Shopana API key
        required: true
        type: string

permissions:
  contents: read
  packages: write

concurrency:
  group: storefront-build-${{ github.ref_name }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/storefront

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    timeout-minutes: 60

    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build_with_platforms.outputs.digest || steps.build.outputs.digest }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Use PAT to ensure access to private submodules
          token: ${{ secrets.RFW_TOKEN }}
          # Fetch repo first; handle submodules after configuring auth
          submodules: false
          fetch-depth: 0
          persist-credentials: true

      - name: Configure auth and fetch submodules
        env:
          RFW_TOKEN: ${{ secrets.RFW_TOKEN }}
        run: |
          set -euo pipefail
          # Rewrite SSH URLs to HTTPS with token for all GitHub fetches
          git config --global url."https://x-access-token:${RFW_TOKEN}@github.com/".insteadOf git@github.com:
          git config --global url."https://x-access-token:${RFW_TOKEN}@github.com/".insteadOf ssh://git@github.com/
          # Sync any URL changes and fetch submodules recursively
          git submodule sync --recursive
          git -c protocol.file.allow=always submodule update --init --recursive

      - name: Validate inputs
        run: |
          set -euo pipefail
          if [[ -z "${{ inputs.image_tag }}" ]]; then
            echo "image_tag is required" >&2
            exit 1
          fi
          # Ensure brand package exists when brand provided
          BRAND_DIR="packages/brand-${{ inputs.brand }}"
          if [[ ! -d "$BRAND_DIR" ]]; then
            echo "Brand package not found: $BRAND_DIR" >&2
            exit 1
          fi

      - name: Set up QEMU (for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.RFW_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ inputs.image_tag }}

      - name: Build and push (with platforms)
        if: ${{ inputs.platforms != '' }}
        id: build_with_platforms
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: ${{ inputs.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CMS=${{ inputs.cms }}
            BRAND=${{ inputs.brand }}
            SHOPANA_GRAPHQL_URL=${{ inputs.shopana_graphql_url }}
            NEXT_PUBLIC_APP_URL=${{ inputs.next_public_app_url }}
            PORT=${{ inputs.port }}
            SHOPANA_API_KEY=${{ inputs.shopana_api_key }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CMS=${{ inputs.cms }}
            BRAND=${{ inputs.brand }}
            SHOPANA_GRAPHQL_URL=${{ inputs.shopana_graphql_url }}
            NEXT_PUBLIC_APP_URL=${{ inputs.next_public_app_url }}
            PORT=${{ inputs.port }}
            SHOPANA_API_KEY=${{ inputs.shopana_api_key }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
